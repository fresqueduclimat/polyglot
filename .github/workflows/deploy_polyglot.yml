name: Polyglot deployment

on:
  push:
    branches:
      - staging
      - main

permissions:
  id-token: write
  contents: read

concurrency:
  group: polyglot-${{ github.ref }}-1
  cancel-in-progress: true

env:
  PRODUCT: polyglot
  API_PORT: 80
  AWS_REGION: ${{ vars.AWS_REGION }}
  ENVIRONMENT: ${{ vars.ENVIRONMENT }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  TASK_CPU: ${{ vars.TASK_CPU }}
  TASK_MEMORY: ${{ vars.TASK_MEMORY }}
  RAILS_ENV: production

jobs:
  build:
    name: Build application
    runs-on: ubuntu-latest
    environment:  ${{ github.ref == 'refs/heads/main' && 'prod' || github.ref == 'refs/heads/staging' && 'staging' || 'staging' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1

      - name: Upgrade deployment files with environment information
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '${'
          tokenSuffix: '}'
          files: '["infra/aws/*.json"]'
        env:
          AWS_ACCOUNT_ID: ${{ env.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Ruby gem cache
        uses: actions/cache@v4
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-new-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-new-gems-

      - name: Install gems
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 21.6.0

      - name: Yarn Install
        run: yarn check || bin/rails yarn:install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.PRODUCT }}-deployer-${{ env.AWS_DEFAULT_REGION }}-${{ env.ENVIRONMENT }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.PRODUCT }}-${{ env.ENVIRONMENT }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f infra/docker/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: infra/aws/task-definition.json
          container-name: ${{ env.PRODUCT }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.PRODUCT }}
          cluster: ${{ env.PRODUCT }}-${{ env.ENVIRONMENT }}
          wait-for-service-stability: true
